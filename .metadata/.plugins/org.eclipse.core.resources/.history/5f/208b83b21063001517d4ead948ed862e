import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

/**
 * Matt DePero CSE283 B Dr. Jianhui Yue
 * 
 * @author deperomm
 * 
 *         This class connects to a TCP server and exchanges messages provided
 *         by the user to attempts to guess a number generated by the server
 * 
 *         This class also creates a manager channel with the server
 */
public class Question_04_Manager {

	private static String hostName;
	private static int port;

	// a scanner for reading in user input
	private static Scanner input = new Scanner(System.in);

	/**
	 * This static class uses the main method to do all of its work The main
	 * method runs, loops during the game, and then ends
	 * 
	 * @param args
	 */
	public static void main(String[] args) {

		// get info for the client
		System.out.print("\nEnter the port of the server you'd like to manage: ");

		port = Integer.parseInt(input.nextLine());

		System.out.print("\nEnter the host you'd like to manage: ");

		hostName = input.nextLine();

		Socket manager = null;

		// Create both socket connections
		try {
			manager = new Socket(hostName, port + 1);

		} catch (UnknownHostException uhe) {

			// Server Host unreachable
			System.out.println("Unknown Host :" + hostName);
			manager = null;

		} catch (IOException ioe) {

			// Cannot connect to port on given server host
			System.out.println("Cant connect to server. " + ioe.getMessage());

			manager = null;
		}

		if (manager == null)
			System.exit(-1);

		BufferedReader manin = null;
		PrintWriter manout = null;

		try {

			// create buffers for the manager channel as well
			manin = new BufferedReader(new InputStreamReader(
					manager.getInputStream()));
			manout = new PrintWriter(new OutputStreamWriter(
					manager.getOutputStream()));

			System.out
					.println("\n\nManager commands: <any integer> = set new max number of guesses to that integer\n"
							+ "                  \"Get success rate\" = returns the success rate on this channel\n ");

			boolean stillPlayingGame = true;

			String serverMessage;

			// begin playing the game
			while (stillPlayingGame) {

				String messageToSend = input.nextLine();

				// run on manager channel

				manout.println(messageToSend);
				manout.flush();

				serverMessage = manin.readLine();

				// interpret the result from the server. End on certain key
				// words.
				if (serverMessage == null
						|| serverMessage.contains("that was your last guess")
						|| serverMessage.contains("quit")) {
					// game ended
					stillPlayingGame = false;
				}

				// if the server returned results, print them
				if (serverMessage != null) {
					System.out.println("Manager channel replied: "
							+ serverMessage + "\n");
				}

			}

		} catch (IOException ioe) {
			System.out
					.println("Exception during communication. Server probably closed connection.");
		} finally {
			try {
				// Close the input and output streams

				manin.close();
				manout.close();

				// close the Scanner
				input.close();

				// Close the socket before quitting
				manager.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}// end main

}// end class