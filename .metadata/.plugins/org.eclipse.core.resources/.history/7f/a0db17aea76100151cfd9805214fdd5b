import java.net.*;
import java.io.*;
import java.util.Random;
import java.util.Scanner;

/**
 * Matt DePero CSE283 B Dr. Jianhui Yue
 * 
 * @author deperomm
 * 
 *         This class connects to a TCP server and exchanges messages provided
 *         by the user to attempts to guess a number generated by the server
 * 
 * 
 */
public class Question_03_Client {
	
	private static String hostName;
	private static int port = 11111;
	
	// a scanner for reading in user input
	private static Scanner input = new Scanner(System.in);

	public static void main(String[] args) {
		
		System.out.print("Enter the port you'd like to use: ");
		
		port = Integer.parseInt(input.nextLine());
		
		System.out.print("\nEnter the host you'd like to connect to: ");
		
		hostName = input.nextLine();
		

		Socket s = null;

		// Create the socket connection to the MultiThreadedSocketServer port
		try {
			s = new Socket(hostName, port);
			
		} catch (UnknownHostException uhe) {
			
			// Server Host unreachable
			System.out.println("Unknown Host :" + hostName);
			s = null;
			
		} catch (IOException ioe) {
			
			// Cannot connect to port on given server host
			System.out
					.println("Cant connect to server. Make sure it is running and port is correct.");
			s = null;
		}

		if (s == null)
			System.exit(-1);

		BufferedReader in = null;
		PrintWriter out = null;

		try {
			// Create the streams to send and receive information
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			out = new PrintWriter(new OutputStreamWriter(s.getOutputStream()));

			// int port = s.getLocalPort();
			// Since this is the client, we will initiate the talking.
			// Send a string data and flush
			out.println("Hi Server, let's play a game.");
			out.flush();
			System.out.println("Hi Server, let's play a game.");
			
			
			boolean stillPlayingGame;
			
			// Receive the reply.
			String handShake = in.readLine();
			
			if(handShake.contains("Ok, let's play.")){
				stillPlayingGame = true;
				System.out.println("Server replied: "+handShake);
			}else{
				stillPlayingGame = false;
			}
			
			String serverMessage;
			
			while(stillPlayingGame){
				
				serverMessage = in.readLine();
				
//				if(serverMessage.contains("That's it!")){
//					stillPlayingGame = false;
//				}
				
				System.out.println("Server replied: "+serverMessage);
				
				System.out.print("What would you like to send back: ");
				System.out.flush();
				String messageToSend = input.nextLine();
				System.out.println("Sent message.");
				out.println(messageToSend);
				out.flush();
				
			}
			

			
			
			
		} catch (IOException ioe) {
			System.out
					.println("Exception during communication. Server probably closed connection.");
		} finally {
			try {
				// Close the input and output streams
				out.close();
				in.close();
				
				// close the Scanner
				input.close();
				
				// Close the socket before quitting
				s.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}