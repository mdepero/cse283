import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Scanner;

public class Question_03_Server {

	// Socket variables
	ServerSocket serverSocket;
	boolean serverIsOn;
	int port;

	// Thread variables
	int threadID;
	
	// used for random number generation
	Random rand = new Random();

	public Question_03_Server() {

		getServerInfo();
		
		setUpServer();

		runServer();

	}
	
	private void getServerInfo(){
		Scanner input = new Scanner(System.in);
		
		System.out.print("What port would you like to use? ");
		port = Integer.parseInt(input.nextLine());
		
		input.close();
	}

	private void setUpServer() {

		try {
			serverSocket = new ServerSocket(port);
		} catch (IOException ioe) {
			System.out.println("Could not create server socket on port " + port
					+ ". Quitting.");

			System.exit(-1);
		}

		serverIsOn = true;

	}

	private void runServer() {

		while (serverIsOn) {

			try {

				Socket socketToClient = serverSocket.accept();

				threadID++;

				ClientThread singleClientThread = new ClientThread(
						socketToClient, threadID);
				singleClientThread.start();

			} catch (IOException ioe) {
				System.out
						.println("Exception encountered on accept. Ignoring. Stack Trace :");
				ioe.printStackTrace();
			}

		}

		try {
			serverSocket.close();
			System.out.println("Server Stopped");
		} catch (Exception ioe) {
			System.out.println("Problem stopping server");
			System.exit(-1);
		}

	}

	public class ClientThread extends Thread {

		Socket clientSocket;
		int threadID;
		boolean threadRunning;
		
		int min, max, numGuesses;

		public ClientThread(Socket clientSocket, int threadID) {

			this.clientSocket = clientSocket;

			this.threadID = threadID;

			threadRunning = false;

		}

		public void run() {

			threadRunning = true;

			System.out.println("Starting Thread.\n  Session: " + threadID
					+ "\n  Client Address: "
					+ clientSocket.getInetAddress().getHostName());

			BufferedReader inputFromClient = null;
			PrintWriter outputToClient = null;

			try {

				inputFromClient = new BufferedReader(new InputStreamReader(
						clientSocket.getInputStream()));

				outputToClient = new PrintWriter(new OutputStreamWriter(
						clientSocket.getOutputStream()));

				while (threadRunning) {

					String clientMessage = inputFromClient.readLine();
					System.out.println("Thread " + threadID
							+ " Said: " + clientMessage);

					if (!serverIsOn) {
						// The server was stopped. Quit this thread
						System.out.print("Ending thread " + threadID
								+ ", server was stopped.");
						outputToClient.println("Sorry, the server was stopped");
						outputToClient.flush();
						threadRunning = false;

					}
					
					String messageToSend;

					if (clientMessage.equalsIgnoreCase("quit")) {
						
						threadRunning = false;
						
						messageToSend = "Quitting process due to stop message: " + clientMessage;
						
					}else if (clientMessage.equalsIgnoreCase("Hi Server, let's play a game.")){
						
						// creates a random range of numbers
						min = rand.nextInt(100);
						
						max = rand.nextInt(500 - min) + min;
						
						messageToSend = "Ok, let's play. Guess a number between "+min+" and "+max+" (inclusive)";
						
					}else{
						
						messageToSend = "Invalid input, try again.";
						
					}
					
					outputToClient.flush();
					outputToClient.println(messageToSend);
					System.out.println("Thread " + threadID+ " Sent: " + messageToSend);
					

				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {

				try {
					inputFromClient.close();
					outputToClient.close();
					clientSocket.close();
					System.out.println("Stopped client");
				} catch (IOException ioe) {
					ioe.printStackTrace();
				}
			}

		}// end run()
		

	}// end inner class ClientThread

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		new Question_03_Server();

	}

}
