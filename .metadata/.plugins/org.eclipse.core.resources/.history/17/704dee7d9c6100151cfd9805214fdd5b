import java.net.*;
import java.io.*;
import java.util.Random;
import java.util.Scanner;

/**
 * Matt DePero CSE283 B Dr. Jianhui Yue
 * 
 * @author deperomm
 * 
 *         This class connects to a TCP server and exchanges messages provided
 *         by the user to attempts to guess a number generated by the server
 * 
 * 
 */
public class Question_03_Client {
	
	private static String hostName;
	private static int port = 11111;

	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);
		
		System.out.print("Enter the port you'd like to use: ");
		
		port = Integer.parseInt(input.nextLine());
		
		System.out.print("\nEnter the host you'd like to connect to: ");
		
		hostName = input.nextLine();
		
		input.close();
		

		Socket s = null;

		// Create the socket connection to the MultiThreadedSocketServer port
		// 11111
		try {
			s = new Socket(args[0], 11111);
		} catch (UnknownHostException uhe) {
			// Server Host unreachable
			System.out.println("Unknown Host :" + args[0]);
			s = null;
		} catch (IOException ioe) {
			// Cannot connect to port on given server host
			System.out
					.println("Cant connect to server at 11111. Make sure it is running.");
			s = null;
		}

		if (s == null)
			System.exit(-1);

		BufferedReader in = null;
		PrintWriter out = null;

		try {
			// Create the streams to send and receive information
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
			out = new PrintWriter(new OutputStreamWriter(s.getOutputStream()));

			int port = s.getLocalPort();
			// Since this is the client, we will initiate the talking.
			// Send a string data and flush
			out.println("Port " + port + " What is going on Server?");
			out.flush();
			// Receive the reply.
			System.out.println(in.readLine());

			// Simulate processing
			try {
				Random rn = new Random();
				int t = rn.nextInt(12);
				Thread.sleep(t * 1000);
			} catch (InterruptedException e) {
				;
			}

			// Send the special string to tell server to quit.
			// out.println("Port "+port+"Quit");
			out.println("Quit");
			out.flush();
		} catch (IOException ioe) {
			System.out
					.println("Exception during communication. Server probably closed connection.");
		} finally {
			try {
				// Close the input and output streams
				out.close();
				in.close();
				// Close the socket before quitting
				s.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}